datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum type_person {
  USER
  ADMIN
  EMPLOYEE
  MANAGER
  GUEST
}

model usuario {
  id                       Int                      @id @default(autoincrement())
  uuid                     String                   @db.Char(36)
  token_api                String?
  senha                    String
  email                    String                   @unique
  telefone                 String?
  is_whatsapp              Boolean?
  cep                      String?
  endereco                 String?
  numero                   String?
  complemento              String?
  tema                     String?
  cpf                      String?                  @unique
  cnpj                     String?                  @unique
  situacao                 Boolean                  @default(true)
  created_at               DateTime                 @default(now())
  deleted_at               DateTime?
  updated_at               DateTime                 @updatedAt
  data_nascimento          DateTime?
  nome                     String
  funcao                   String?
  usuario_foto             String?
  tipo_pessoa              type_person              @default(EMPLOYEE)
  tipo_sistemas            usuario_tipo_sistema[]
  avaliacoes               avaliacao[]
  dias_trabalhados         dia_trabalhado[]
  dia_trabalhado_estoque dia_trabalhado_estoque[]
  vendas                   venda[]
  metas                    Meta[]                   @relation("UsuarioMetas") // Relacionamento com metas
}

model usuario_tipo_sistema {
  id              Int          @id @default(autoincrement())
  id_usuario      Int
  id_tipo_sistema Int
  usuario         usuario      @relation(fields: [id_usuario], references: [id])
  tipo_sistema    tipo_sistema @relation(fields: [id_tipo_sistema], references: [id])

  @@unique([id_usuario, id_tipo_sistema])
}

model tipo_sistema {
  id                  Int                    @id @default(autoincrement())
  nome                String                 @unique
  produtos            produto[]
  usuarios            usuario_tipo_sistema[]
  linha_tipo_sistemas linha_tipo_sistema[] // Adicionado para a relação com Linha_Tipo_Sistema
}

model dia_trabalhado {
  id              Int      @id @default(autoincrement())
  user_id         Int
  data            DateTime
  horario_entrada DateTime
  horario_saida   DateTime
  observacao      String?
  is_present      Boolean
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt

  usuario usuario @relation(fields: [user_id], references: [id])

  @@index([user_id, data])
}

model dia_trabalhado_estoque {
  id              Int      @id @default(autoincrement())
  pedidos         Int
  realizados      Int
  data_trabalho   DateTime @default(now())
  horario_entrada String
  horario_saida   String
  usuario         usuario? @relation(fields: [usuarioId], references: [id])
  usuarioId       Int?
}

model venda {
  id             Int             @id @default(autoincrement())
  funcionario_id Int
  data_venda     DateTime        @default(now())
  pontos_totais  Float
  situacao       Boolean
  funcionario    usuario         @relation(fields: [funcionario_id], references: [id])
  venda_detalhe  venda_detalhe[]
  loja_id        Int? // Nova coluna que referencia a loja
  loja           loja?           @relation(fields: [loja_id], references: [id]) // Adicionado '?' aqui

  @@unique([funcionario_id, data_venda])
}

model venda_detalhe {
  id         Int     @id @default(autoincrement())
  venda_id   Int
  produto_id Int
  quantidade Int
  pontos     Int
  venda      venda   @relation(fields: [venda_id], references: [id])
  produto    produto @relation(fields: [produto_id], references: [id])

  @@index([venda_id, produto_id])
}

model produto {
  id                Int             @id @default(autoincrement())
  codigo            String          @unique
  nome              String
  descricao         String?
  estoque           Int?
  id_fornecedor     String?
  id_marca          Int? // Certifique-se de que este campo é opcional
  preco             Float?
  formato           String?
  data_expiracao    DateTime?
  is_frete_gratis   Boolean?
  pontos            Int?
  peso_liquido      Float?
  peso_bruto        Float?
  largura           Float?
  altura            Float?
  profundidade      Float?
  volumes           Int?
  itens_por_caixa   Int?
  unidade_de_medida String?
  situacao          Boolean
  imagem            String?
  avaliacoes        avaliacao[]
  marca             marca?          @relation(fields: [id_marca], references: [id]) // Relacionamento opcional
  categorias        categoria[]     @relation("categoria_to_produto")
  venda_detalhe     venda_detalhe[]
  tipo_sistema      tipo_sistema?   @relation(fields: [id_tipo_sistema], references: [id])
  id_tipo_sistema   Int?
  linhas            linha[]         @relation("linha_produto")
  linha_produto     linha_produto[] // Adicionado para a relação com Linha_Produto
}

model avaliacao {
  id         Int      @id @default(autoincrement())
  nota       Int
  comentario String?
  id_produto Int
  id_usuario Int
  created_at DateTime @default(now())
  produto    produto  @relation(fields: [id_produto], references: [id])
  usuario    usuario  @relation(fields: [id_usuario], references: [id])
}

model categoria {
  id       Int       @id @default(autoincrement())
  nome     String    @unique
  produtos produto[] @relation("categoria_to_produto")
}

model marca {
  id       Int       @id @default(autoincrement())
  nome     String    @unique
  produtos produto[]
  linhas   linha[]
  metas    Meta[]
}

model pedido {
  id                   Int      @id @default(autoincrement())
  numero               Int
  data                 DateTime
  data_prevista        DateTime
  total_produtos       Float
  total                Float
  ordem_compra         String
  observacoes          String
  observacoes_internas String
}

model mail {
  id             Int       @id @default(autoincrement())
  assunto        String?   @db.VarChar(445)
  corpo          String?
  email          String?   @db.VarChar(245)
  data_cadastro  DateTime?
  data_envio     DateTime?
  situacao_envio Int?
  origem         String?   @db.VarChar(100)
}

model linha {
  id            Int                  @id @default(autoincrement())
  nome          String               @unique
  marcaId       Int
  marca         marca                @relation(fields: [marcaId], references: [id])
  produtos      produto[]            @relation("linha_produto")
  tipo_sistemas linha_tipo_sistema[]
  linha_produto linha_produto[]

  @@index([nome])
}

model linha_tipo_sistema {
  id              Int          @id @default(autoincrement())
  id_linha        Int
  id_tipo_sistema Int
  linha           linha        @relation(fields: [id_linha], references: [id])
  tipo_sistema    tipo_sistema @relation(fields: [id_tipo_sistema], references: [id])

  @@unique([id_linha, id_tipo_sistema])
}

model linha_produto {
  id         Int     @id @default(autoincrement())
  id_linha   Int
  id_produto Int
  linha      linha   @relation(fields: [id_linha], references: [id])
  produto    produto @relation(fields: [id_produto], references: [id])

  @@unique([id_linha, id_produto])
}

model loja {
  id            Int     @id @default(autoincrement())
  nome_fantasia String
  razao_social  String
  vendas        venda[] // Relacionamento com vendas
}

model Meta {
  id               Int         @id @default(autoincrement())
  descricao        String // Descrição da meta
  data_inicio      DateTime // Data de início da meta
  data_fim         DateTime // Data de fim da meta
  marca_id         Int // ID da marca associada
  quantidade_total Int // Total de produtos que devem ser vendidos (soma das etapas)
  situacao         Boolean // Situação da meta (ativa ou inativa)
  etapas           MetaEtapa[]
  usuarios         usuario[]   @relation("UsuarioMetas") // Relacionamento com múltiplos usuários
  created_at       DateTime    @default(now())
  updated_at       DateTime    @updatedAt

  marca marca @relation(fields: [marca_id], references: [id]) // Relacionamento para a marca

  @@index([marca_id])
}

model MetaEtapa {
  id         Int      @id @default(autoincrement())
  meta_id    Int // ID da meta associada
  quantidade Int // Quantidade para essa etapa
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  meta Meta @relation(fields: [meta_id], references: [id])
}
